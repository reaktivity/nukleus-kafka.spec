#
# Copyright 2016-2017 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property newNetworkRouteRef ${nuklei:newReferenceId()} # external scope

property newTimestamp ${kafka:timestamp()}

property networkAccept "nukleus://kafka/streams/source"
property networkAcceptWindow 8192

accept ${networkAccept}
  option nukleus:route  ${newNetworkRouteRef}
  option nukleus:window ${networkAcceptWindow}
  option nukleus:transmission "duplex"
  option nukleus:byteorder "network"

# Metadata stream
accepted
connected

read 21         # Size int32
read 3s      # ApiKey int16 (Metadata)
read 5s      # ApiVersion int16
read (int:metadataRequestId)
read -1s        # ClientId string (null)
read 1          # [TopicName] array length
  read 4s "test"
read [0x00]     # allow_auto_topic_creation (boolean)

write 85        # Size int32
write ${metadataRequestId}  # CorrelationId int32
write 0         # throttle_time_ms int32
write 1         # brokers array length
  write 1       # broker id
  write 7s "broker1"
  write 9093    # port int32
  write -1s     # rack string (null)
write 9s "cluster 1"
write 1         # controller broker id
write 1         # topic array length
  write 0s      # error code
  write 4s "test"
  write byte 0              # is_internal
  write 1       # partition array length
    write 0s    # error code
    write 0     # partition
    write 1     # leader
    write 0     # replicas array (empty)
    write -1    # isr array (null)
    write 0     # offline replicas array (empty)

read 41         # Size int32
read 32s        # ApiKey int16 (DescribeConfigs)
read 0s         # ApiVersion int16
read (int:metadataRequestId) # CorrelationId int32
read -1s        # ClientId string (null)
read 1          # [Resources] array length
read [0x02]     # resource type int8 (topic) 
read 4s "test"  # topic name
read 1          # config_names count
read 14s "cleanup.policy"

write 54        # Size int32
write ${metadataRequestId}  # CorrelationId int32
write 0         # throttle_time_ms int32
write 1         # resources count
write 0s        # error code
write -1s       # error message
write [0x02]    # resource type
write 4s "test" # topic name
write 1         # config entries count
write 14s "cleanup.policy"  # config name
write 6s "delete"           # config  value
write [0x00]    # read_only boolean
write [0x01]    # is_default boolean
write [0x00]    # is_sensitive boolean

# Fetch stream
accepted
read nukleus:begin.ext ${tcp:beginExtRemoteHost("broker1", 9093)}
connected

read 65
read 1s
read 5s
read (int:requestId)
read -1s
read -1
read [0..4]
read 1
read [0..4]
read [0x00]
read 1
read 4s "test"
read 1
read 0
read 0L
read -1L
read [0..4]

write 144
write ${requestId}
write 0
write 1
write 4s "test"
write 1
write 0         # partition
write 0s
write 999L      # high watermark
write -1L
write 0L        # log start offset
write -1
write 84        # length of record set (15 too short for last record)
write 0L        # first offset
write 72        # length of record batch
write 0
write [0x02]
write 0x4e8723aa
write 0s
write 10         # last offset delta
write ${newTimestamp}
write ${newTimestamp}
write -1L
write -1s
write -1
write 2
write ${kafka:varint(18)}
write [0x00]    # attributes
write ${kafka:varint(0)}     # timestamp delta
write ${kafka:varint(0)}     # offset delta
write ${kafka:varint(-1)}
write ${kafka:varint(12)}
write "Hello, world"
write [0x00]
write ${kafka:varint(18)}
write [0x00]
write ${kafka:varint(10)}    # timestamp delta
write ${kafka:varint(10)}     # offset delta
# record truncated (15 remaining bytes missing)

# second request to get the truncated record
read 65
read 1s
read 5s
read (int:requestId)
read -1s
read -1
read [0..4]
read 1
read [0..4]
read [0x00]
read 1
read 4s "test"
read 1
read 0
read 10L        # requested offset
read -1L
read [0..4]

write 140
write ${requestId}
write 0
write 1
write 4s "test"
write 1
write 0         # partition
write 0s
write 999L      # high watermark
write -1L
write 0L        # log start offset
write -1
write 80        # length of record set
write 10L       # first offset
write 68        # length of record batch
write 0
write [0x02]
write 0x4e8723aa
write 0s
write 0          # last offset delta
write ${newTimestamp}
write ${newTimestamp}
write -1L
write -1s
write -1
write 1
write ${kafka:varint(18)}
write [0x00]    # attributes
write ${kafka:varint(0)}     # timestamp delta
write ${kafka:varint(0)}     # offset delta
write ${kafka:varint(-1)}
write ${kafka:varint(12)}
write "Hello, again"
write [0x00]
