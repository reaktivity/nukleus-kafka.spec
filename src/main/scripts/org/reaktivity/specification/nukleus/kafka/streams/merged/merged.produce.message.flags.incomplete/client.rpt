#
# Copyright 2016-2020 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property clientAddress "nukleus://streams/kafka#0"

property deltaMillis 0L
property newTimestamp ${kafka:timestamp() + deltaMillis}

connect await ROUTED_CLIENT
        ${clientAddress}
    option nukleus:window 8192
    option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .merged()
                                   .capabilities("PRODUCE_ONLY")
                                   .topic("test")
                                   .build()
                               .build()}

connected

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .merged()
                                  .deferred(28)
                                  .timestamp(newTimestamp)
                                  .partition(-1, -1)
                                  .build()
                              .build()}

write option nukleus:flags "init"
write "First fragment"
write flush

write option nukleus:flags "none"
write "Middle fragment"
write flush

write option nukleus:flags "incomplete"
write "Last fragment"
write flush

write option nukleus:flags "auto"

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .merged()
                                  .timestamp(newTimestamp)
                                  .partition(-1, -1)
                                  .build()
                              .build()}

write "Hello, world"
write flush
