#
# Copyright 2016-2021 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property clientAddress "nukleus://streams/kafka#0"

connect await ROUTED_CLIENT
        ${clientAddress}
    option nukleus:window 8192
    option nukleus:transmission "half-duplex"

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .meta()
                                   .topic("test")
                                   .build()
                               .build()}

connected

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .meta()
                                  .topic("test")
                                  .build()
                              .build()}

read nukleus:data.ext ${kafka:dataEx()
                             .typeId(nukleus:id("kafka"))
                             .meta()
                                 .partition(0, 177)
                                 .build()
                             .build()}

read notify ROUTED_BROKER_CLIENT

connect await ROUTED_BROKER_CLIENT
        ${clientAddress}
    option nukleus:window 8192
    option nukleus:transmission "half-duplex"
    option nukleus:affinity 0xb1

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .fetch()
                                   .topic("test")
                                   .partition(0, 1)
                                   .filter()
                                       .headers("header3")
                                           .sequence("one")
                                           .skip(1)
                                           .build()
                                       .build()
                                   .build()
                               .build()}

connected

read notify RECEIVED_MESSAGE_2

read nukleus:data.ext ${kafka:matchDataEx()
                             .typeId(nukleus:id("kafka"))
                             .fetch()
                                 .partition(0, 6, 8)
                                 .header("header3", "one")
                                 .header("header3", "")
                                 .build()
                             .build()}
read "Hello, world"
