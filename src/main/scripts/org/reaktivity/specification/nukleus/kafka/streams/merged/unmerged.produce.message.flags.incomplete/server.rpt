#
# Copyright 2016-2020 The Reaktivity Project
#
# The Reaktivity Project licenses this file to you under the Apache License,
# version 2.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

property serverAddress "nukleus://streams/kafka#0"

property deltaMillis 0L
property newTimestamp ${kafka:timestamp() + deltaMillis}

accept ${serverAddress}
    option nukleus:window 64
    option nukleus:transmission "half-duplex"

accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .describe()
                                  .topic("test")
                                  .config("cleanup.policy")
                                  .config("max.message.bytes")
                                  .config("segment.bytes")
                                  .config("segment.index.bytes")
                                  .config("segment.ms")
                                  .config("retention.bytes")
                                  .config("retention.ms")
                                  .config("delete.retention.ms")
                                  .config("min.compaction.lag.ms")
                                  .config("max.compaction.lag.ms")
                                  .config("min.cleanable.dirty.ratio")
                                  .build()
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .describe()
                                   .topic("test")
                                   .config("cleanup.policy")
                                   .config("max.message.bytes")
                                   .config("segment.bytes")
                                   .config("segment.index.bytes")
                                   .config("segment.ms")
                                   .config("retention.bytes")
                                   .config("retention.ms")
                                   .config("delete.retention.ms")
                                   .config("min.compaction.lag.ms")
                                   .config("max.compaction.lag.ms")
                                   .config("min.cleanable.dirty.ratio")
                                   .build()
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .describe()
                                  .config("cleanup.policy", "delete")
                                  .config("max.message.bytes", 1000012)
                                  .config("segment.bytes", 1073741824)
                                  .config("segment.index.bytes", 10485760)
                                  .config("segment.ms", 604800000)
                                  .config("retention.bytes", -1)
                                  .config("retention.ms", 604800000)
                                  .config("delete.retention.ms", 86400000)
                                  .config("min.compaction.lag.ms", 0)
                                  .config("max.compaction.lag.ms", 9223372036854775807)
                                  .config("min.cleanable.dirty.ratio", 0.5)
                                  .build()
                              .build()}
write flush

accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .meta()
                                  .topic("test")
                                  .build()
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .meta()
                                   .topic("test")
                                   .build()
                               .build()}
write flush

write nukleus:data.ext ${kafka:dataEx()
                              .typeId(nukleus:id("kafka"))
                              .meta()
                                  .partition(0, 1)
                                  .build()
                              .build()}
write flush

accepted

read nukleus:begin.ext ${kafka:beginEx()
                              .typeId(nukleus:id("kafka"))
                              .produce()
                                  .topic("test")
                                  .partition(0)
                                  .build()
                              .build()}

connected

write nukleus:begin.ext ${kafka:beginEx()
                               .typeId(nukleus:id("kafka"))
                               .produce()
                                   .topic("test")
                                   .partition(0)
                                   .build()
                               .build()}
write flush

read nukleus:data.ext ${kafka:matchDataEx()
                              .typeId(nukleus:id("kafka"))
                              .produce()
                                  .timestamp(newTimestamp)
                                  .build()
                              .build()}
read "Hello, world"
